import os
import tkinter as tk
from tkinter import filedialog, messagebox
from PIL import Image, ImageTk

class ImageViewer:
    def __init__(self, root):
        self.root = root
        self.root.title("Image Viewer")
        self.root.geometry("800x600")

        # Frame for Image Display
        self.image_frame = tk.Frame(root)
        self.image_frame.pack(expand=True, fill=tk.BOTH)

        self.image_label = tk.Label(self.image_frame, text="No Image Loaded", font=("Arial", 14))
        self.image_label.pack(expand=True)

        # Frame for Buttons
        self.btn_frame = tk.Frame(root)
        self.btn_frame.pack(side=tk.BOTTOM, fill=tk.X, pady=10)

        self.prev_button = tk.Button(self.btn_frame, text="Previous", command=self.prev_image, state=tk.DISABLED)
        self.prev_button.pack(side=tk.LEFT, expand=True, padx=5)

        self.next_button = tk.Button(self.btn_frame, text="Next", command=self.next_image, state=tk.DISABLED)
        self.next_button.pack(side=tk.LEFT, expand=True, padx=5)

        self.open_button = tk.Button(self.btn_frame, text="Open Folder", command=self.load_images)
        self.open_button.pack(side=tk.LEFT, expand=True, padx=5)

        self.exit_button = tk.Button(self.btn_frame, text="Exit", command=root.quit)
        self.exit_button.pack(side=tk.LEFT, expand=True, padx=5)

        self.image_list = []
        self.current_index = 0

    def load_images(self):
        folder_selected = filedialog.askdirectory()
        if not folder_selected:
            return

        # Load image paths
        self.image_list = [
            os.path.join(folder_selected, f) 
            for f in os.listdir(folder_selected) 
            if f.lower().endswith((".png", ".jpg", ".jpeg", ".bmp"))
        ]
        
        if not self.image_list:
            messagebox.showerror("Error", "No images found in the selected folder!")
            return
        
        self.current_index = 0
        self.display_image()
        self.update_buttons()

    def display_image(self):
        if not self.image_list:
            return
        
        img_path = self.image_list[self.current_index]
        
        try:
            print(f"Loading image: {img_path}")  # Debugging line

            img = Image.open(img_path)
            img = img.resize((600, 400), Image.Resampling.LANCZOS)  # Resize the image
            
            img_tk = ImageTk.PhotoImage(img)
            self.image_label.config(image=img_tk, text="")
            self.image_label.image = img_tk
        except Exception as e:
            print(f"Error loading image {img_path}: {e}")  # Debugging output
            messagebox.showerror("Error", f"Failed to load image:\n{img_path}\n{e}")
            self.image_label.config(text="Error loading image", image="")
            self.image_list.pop(self.current_index)  # Remove problematic image
            self.update_buttons()

    def next_image(self):
        if self.current_index < len(self.image_list) - 1:
            self.current_index += 1
            self.display_image()
            self.update_buttons()

    def prev_image(self):
        if self.current_index > 0:
            self.current_index -= 1
            self.display_image()
            self.update_buttons()

    def update_buttons(self):
        self.prev_button.config(state=tk.NORMAL if self.current_index > 0 else tk.DISABLED)
        self.next_button.config(state=tk.NORMAL if self.current_index < len(self.image_list) - 1 else tk.DISABLED)


if __name__ == "__main__":
    root = tk.Tk()
    app = ImageViewer(root)
    root.mainloop()
